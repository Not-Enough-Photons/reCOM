((
   ANIMATION_DEFINITIONS (
    ANIMATION_LIST (
     ANIMATION_DEFINITION (
      ANIMATION_NAME ( F_Guard1_special )
    
     ACTIVATION ( ON_CALL )
    
     AUTO_COPY_ANIMATION ()
    
     SEQUENCE_DEFINITION (
       NAME ( seq_0 )
     
      ai::SPECIAL ()
     
     )
    
    )
   
    ANIMATION_DEFINITION (
      ANIMATION_NAME ( F_Guard1_start )
    
     ACTIVATION ( ON_CALL )
    
     SEQUENCE_DEFINITION (
       NAME ( sleeper_hold )
     
      ai::PARAM ( sleep  =  1 )
     
      WHILE (
        VALVE ( aiteam_06  ==  3 )
      
      )
     
      END_WHILE ()
     
      ai::PARAM ( sleep  =  0 )
     
      ai::PARAM ( aware  =  2 )
     
      WHILE (
        !  ai::INREGION (
         region ( Suicide )
       
        entity ( player )
       
       )
      
      )
     
      END_WHILE ()
     
      ai::DEBUG ( "CALLING BOMB MACRO!" )
     
      SOUND (
        NAME ( SND_VM15_57 )
      
       AT_NODE ( INPUT_NODE )
      
       START ()
      
      )
     
      ai::MACRO (
        anim ( Bomb_gambit )
      
       blocking )
     
      WHILE ( TRUE )
     
      ai::HOLD ( TRUE )
     
      END_WHILE ()
     
     )
    
     SEQUENCE_DEFINITION (
       NAME ( on_aware0 )
     
      ai::DEBUG ( "starting on_aware0" )
     
      ACTIVATION ( ON_CALL )
     
     )
    
     SEQUENCE_DEFINITION (
       NAME ( on_aware1 )
     
      ai::DEBUG ( "starting on_aware1" )
     
      ACTIVATION ( ON_CALL )
     
     )
    
     SEQUENCE_DEFINITION (
       NAME ( on_aware2 )
     
      ai::DEBUG ( "starting on_aware2" )
     
      ACTIVATION ( ON_CALL )
     
      ai::SETANIMSET (
        name ( "Guard anim set" )
      
      )
     
     )
    
     SEQUENCE_DEFINITION (
       NAME ( on_aware3 )
     
      ai::DEBUG ( "starting on_aware3" )
     
      ACTIVATION ( ON_CALL )
     
     )
    
     SEQUENCE_DEFINITION (
       NAME ( on_aware4 )
     
      ai::DEBUG ( "starting on_aware4" )
     
      ACTIVATION ( ON_CALL )
     
      IF (
        RANDOM_WEIGHT ( 0.200000 )
      
      )
     
      SOUND (
        NAME ( SND_VM15_31 )
      
       AT_NODE ( INPUT_NODE )
      
       START ()
      
      )
     
      ENDIF ()
     
      IF (
        ai::VALVE ( valve_shot  ==  1 )
      
      )
     
      ai::PARAM ( param_accuracy  =  0.500000 )
     
      ai::PARAM ( param_courage  =  0.700000 )
     
      ELSEIF (
        VALVE ( CAUGHT  ==  1 )
      
      )
     
      ai::PARAM ( param_accuracy  =  0.900000 )
     
      ENDIF ()
     
      WHILE (
        VALVE ( Big_Boom  >  0 )
      
      )
     
      IF (
        ai::INRANGE (
         entity ( player )
       
        range ( 80 )
       
       )
      
       ||  ai::INRANGE (
         entity ( DiMone )
       
        range ( 80 )
       
       )
      
      )
     
      ai::FIREMODE (
        weapon ( 0 )
      
       trigger ( 1.000000  1.500000 )
      
       fullauto )
     
      ELSEIF (
        ai::INRANGE (
         entity ( player )
       
        range ( 300 )
       
       )
      
       ||  ai::INRANGE (
         entity ( DiMone )
       
        range ( 300 )
       
       )
      
      )
     
      IF (
        RANDOM_WEIGHT ( 0.800000 )
      
      )
     
      ai::FIREMODE (
        weapon ( 0 )
      
       trigger ( 1.000000  0.500000 )
      
       burst )
     
      ELSEIF ()
     
      ai::SIGNAL ( BEGIN_CRITICAL_SECTION )
     
      ai::FIREMODE (
        weapon ( 1 )
      
       trigger ( 0.200000  8.000000 )
      
      )
     
      WAIT ( EVENT_OFFSET  8.000000 )
     
      ai::SIGNAL ( END_CRITICAL_SECTION )
     
      ENDIF ()
     
      ELSE (
        ai::INRANGE (
         entity ( player )
       
        range ( 500 )
       
       )
      
       ||  ai::INRANGE (
         entity ( DiMone )
       
        range ( 500 )
       
       )
      
      )
     
      ai::FIREMODE (
        weapon ( 0 )
      
       trigger ( 1.000000  1.000000 )
      
       burst )
     
      ENDIF ()
     
      END_WHILE ()
     
     )
    
     SEQUENCE_DEFINITION (
       NAME ( on_corpse )
     
      ai::DEBUG ( "starting on_corpse" )
     
      ACTIVATION ( ON_CALL )
     
     )
    
    )
   
   )
  
  )
 
 )

)

